// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../../data/module/activity/model/activity_model.dart';
import '../../../../data/module/user/model/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 279273054532516135),
      name: 'ActivityModel',
      lastPropertyId: const obx_int.IdUid(10, 6871591575630095660),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8797163194639975388),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1843556746248760396),
            name: 'uuid',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(1, 4796088554537724551)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3371278350129410202),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1766696825189531480),
            name: 'color',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2675029789086486619),
            name: 'frequency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1949953368156355935),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7377377160380583030),
            name: 'startDate',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8965193104616491984),
            name: 'createdAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2298004891819528363),
            name: 'updatedAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6871591575630095660),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 5048873465078003158),
            relationTarget: 'UserModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7879235642904607155),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(7, 4775283057497159514),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8524663455801712097),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1361356728446816992),
            name: 'userId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(3, 3452359514478114052)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2415248752793804494),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 884712290395477354),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9072710351808493046),
            name: 'profilePicture',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1660608513897416191),
            name: 'createdAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4775283057497159514),
            name: 'updatedAt',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 7879235642904607155),
      lastIndexId: const obx_int.IdUid(3, 3452359514478114052),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ActivityModel: obx_int.EntityDefinition<ActivityModel>(
        model: _entities[0],
        toOneRelations: (ActivityModel object) => [object.user],
        toManyRelations: (ActivityModel object) => {},
        getId: (ActivityModel object) => object.id,
        setId: (ActivityModel object, int id) {
          object.id = id;
        },
        objectToFB: (ActivityModel object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final titleOffset = fbb.writeString(object.title);
          final colorOffset = fbb.writeString(object.color);
          final frequencyOffset = fbb.writeString(object.frequency);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, colorOffset);
          fbb.addOffset(4, frequencyOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(6, object.startDate.microsecondsSinceEpoch * 1000);
          fbb.addInt64(7, object.createdAt.microsecondsSinceEpoch * 1000);
          fbb.addInt64(8, object.updatedAt.microsecondsSinceEpoch * 1000);
          fbb.addInt64(9, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final frequencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final startDateParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0) /
                      1000)
                  .round());
          final createdAtParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0) /
                      1000)
                  .round());
          final updatedAtParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0) /
                      1000)
                  .round());
          final object = ActivityModel(
              id: idParam,
              uuid: uuidParam,
              title: titleParam,
              color: colorParam,
              frequency: frequencyParam,
              description: descriptionParam,
              startDate: startDateParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.user.attach(store);
          return object;
        }),
    UserModel: obx_int.EntityDefinition<UserModel>(
        model: _entities[1],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final profilePictureOffset = object.profilePicture == null
              ? null
              : fbb.writeString(object.profilePicture!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, profilePictureOffset);
          fbb.addInt64(
              5,
              object.createdAt == null
                  ? null
                  : object.createdAt!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(
              6,
              object.updatedAt == null
                  ? null
                  : object.updatedAt!.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final profilePictureParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (createdAtValue / 1000).round());
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (updatedAtValue / 1000).round());
          final object = UserModel(
              id: idParam,
              userId: userIdParam,
              name: nameParam,
              email: emailParam,
              profilePicture: profilePictureParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ActivityModel] entity fields to define ObjectBox queries.
class ActivityModel_ {
  /// See [ActivityModel.id].
  static final id =
      obx.QueryIntegerProperty<ActivityModel>(_entities[0].properties[0]);

  /// See [ActivityModel.uuid].
  static final uuid =
      obx.QueryStringProperty<ActivityModel>(_entities[0].properties[1]);

  /// See [ActivityModel.title].
  static final title =
      obx.QueryStringProperty<ActivityModel>(_entities[0].properties[2]);

  /// See [ActivityModel.color].
  static final color =
      obx.QueryStringProperty<ActivityModel>(_entities[0].properties[3]);

  /// See [ActivityModel.frequency].
  static final frequency =
      obx.QueryStringProperty<ActivityModel>(_entities[0].properties[4]);

  /// See [ActivityModel.description].
  static final description =
      obx.QueryStringProperty<ActivityModel>(_entities[0].properties[5]);

  /// See [ActivityModel.startDate].
  static final startDate =
      obx.QueryDateNanoProperty<ActivityModel>(_entities[0].properties[6]);

  /// See [ActivityModel.createdAt].
  static final createdAt =
      obx.QueryDateNanoProperty<ActivityModel>(_entities[0].properties[7]);

  /// See [ActivityModel.updatedAt].
  static final updatedAt =
      obx.QueryDateNanoProperty<ActivityModel>(_entities[0].properties[8]);

  /// See [ActivityModel.user].
  static final user = obx.QueryRelationToOne<ActivityModel, UserModel>(
      _entities[0].properties[9]);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [UserModel.id].
  static final id =
      obx.QueryIntegerProperty<UserModel>(_entities[1].properties[0]);

  /// See [UserModel.userId].
  static final userId =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[1]);

  /// See [UserModel.name].
  static final name =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[2]);

  /// See [UserModel.email].
  static final email =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[3]);

  /// See [UserModel.profilePicture].
  static final profilePicture =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[4]);

  /// See [UserModel.createdAt].
  static final createdAt =
      obx.QueryDateNanoProperty<UserModel>(_entities[1].properties[5]);

  /// See [UserModel.updatedAt].
  static final updatedAt =
      obx.QueryDateNanoProperty<UserModel>(_entities[1].properties[6]);
}
